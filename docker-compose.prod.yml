# Docker Compose configuration for production environment
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  app:
    build:
      target: production
    environment:
      # Production environment variables
      - ENV=production
      - DEBUG=false
      - LOG_LEVEL=info
      
      # Security settings
      - SECURE_COOKIES=true
      - CORS_CREDENTIALS=true
      
      # Performance settings
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=50
      
    # Production scaling
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

    # Production command with optimizations
    command: >
      sh -c "
        echo 'Starting production server...'
        python -m uvicorn backend.main:app 
          --host 0.0.0.0 
          --port 8000 
          --workers $${WORKERS:-4}
          --worker-class uvicorn.workers.UvicornWorker
          --max-requests $${MAX_REQUESTS:-1000}
          --max-requests-jitter $${MAX_REQUESTS_JITTER:-50}
          --preload
          --access-log
          --no-use-colors
      "

    # Production-only volumes (no source code mounting)
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

  # Production Redis configuration
  redis:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # Production Redis command with optimizations
    command: >
      redis-server
        --appendonly yes
        --maxmemory 200mb
        --maxmemory-policy allkeys-lru
        --tcp-keepalive 60
        --timeout 300
        --save 900 1 300 10 60 10000

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: flyerflutter-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - flyerflutter_network
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M

  # Log aggregation service
  fluentd:
    image: fluent/fluentd:latest
    container_name: flyerflutter-logs
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/app/logs:ro
    networks:
      - flyerflutter_network
    restart: unless-stopped
    profiles: ["logging"]

  # Monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: flyerflutter-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - flyerflutter_network
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  prometheus_data:
    driver: local